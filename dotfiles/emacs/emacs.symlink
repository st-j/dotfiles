;; -*- mode: lisp -*-
;;;==============================================================================
;;;==============================================================================
;;;
;;; global stuff
;;;
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(setq transient-mark-mode t)
(show-paren-mode t) ; always highlight matching parentheses
(if window-system (tool-bar-mode -1)) ; hide toolbar
;; new frames created through emacsclient -n still have a toolbar,
;; even with the above setting of (tool-bar-mode -1). The following
;; function is run every time a new frame is created and switches off
;; the toolbar
(defun configure-new-frame (_)
  (tool-bar-mode -1))
(add-to-list 'after-make-frame-functions #'configure-new-frame)
;; size of new frames
(add-to-list 'default-frame-alist '(width  . 98))
(add-to-list 'default-frame-alist '(height . 65))

(setq default-tab-width 4) 
(setq tab-width 4)
(setq c-basic-offset 4)
(add-to-list 'load-path "~/.emacs.d/lisp")
(setq-default fill-column 95)
(require 'whitespace)


(setenv "PATH" (concat "/usr/local/bin:/usr/texbin:" (getenv "PATH")))

;;;==============================================================================
;;;==============================================================================
;;;
;;; package management
;;;
(require 'package) ;; You might already have this line
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("SC"    . "http://joseito.republika.pl/sunrise-commander/"))

(package-initialize) ;; You might already have this line

(setq my-package-list
	  '(slime ac-slime yaml-mode cmake-mode python-mode gnuplot auctex
		auto-complete-auctex icicles pivotal-tracker palette transpose-frame
		helm
		monokai-theme
		yasnippet common-lisp-snippets
		emmet-mode
		multiple-cursors mc-extras
		expand-region
		magit magit-gitflow magit-popup
		git-timemachine
		sunrise-commander sunrise-x-buttons sunrise-x-tree
		git-gutter-fringe+
		paredit
		markdown-mode
		wolfram-mode
		org-mac-link
		apples-mode))

(mapc #'package-install my-package-list)

;;;==============================================================================
;;;==============================================================================
;;;
;;; global keybindings (keybindings for specific modes: see below)
;;; 

;; switch command and control keys
(setq mac-command-modifier 'control)
(setq mac-control-modifier 'super)

;; M-u is normally bound to "upcase word" which I need far, far less then
;; OSX's standard compose key for umlauts.
(global-unset-key (kbd "M-u"))
(global-set-key (kbd "M-u a") (lambda () (interactive) (insert "ä")))
(global-set-key (kbd "M-u o") (lambda () (interactive) (insert "ö")))
(global-set-key (kbd "M-u u") (lambda () (interactive) (insert "ü")))
(global-set-key (kbd "M-u A") (lambda () (interactive) (insert "Ä")))
(global-set-key (kbd "M-u O") (lambda () (interactive) (insert "Ö")))
(global-set-key (kbd "M-u U") (lambda () (interactive) (insert "Ü")))

;; osx full screen
(global-set-key (kbd "s-<f11>") 'toggle-frame-fullscreen)

;; switch between windows using cmd-arrowkey
(windmove-default-keybindings)
(global-set-key (kbd "s-<left>")  'windmove-left)
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<up>")    'windmove-up)
(global-set-key (kbd "s-<down>")  'windmove-down)

;; cycle through windows
(global-set-key (kbd "C-.") 'other-window)
(global-set-key (kbd "C-,") 'prev-window)

(defun prev-window ()
  (interactive)
  (other-window -1))

;; cycle buffers
(global-set-key (kbd "C->") 'next-buffer)
(global-set-key (kbd "C-<") 'previous-buffer)

;; adjust text scale
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(setq text-scale-mode-step 1.1)

;;==============================================================================
;;==============================================================================
;;;
;;; UI tweaks
;;;

;;
;; uniquify buffer names by prepending elements from the path
;;
(when (require 'uniquify nil t)
  (setq uniquify-buffer-name-style 'forward))

;;
;; Recently opened files
;;
(require 'recentf nil t)
(when (fboundp 'recentf-mode) (recentf-mode 1))
(global-set-key "\C-o" 'recentf-open-files) ;displays this menu in a buffer

;;
;; "smooth" scrolling (or, at least, what emacs sees as smooth. should be called
;; "less-annoyingly-jerky-scrolling)
;;
(setq redisplay-dont-pause t
	  scroll-margin 1
	  scroll-step 1
	  scroll-conservatively 10000
	  scroll-preserve-screen-position 1
	  mouse-wheel-scroll-amount '(1 ((shift) . 1))
	  mouse-wheel-progressive-speed nil
	  mouse-wheel-follow-mouse 't)

;;
;; display ansi colors in comint mode (shell output, ...)
;; and in compilation mode (e.g.: taskjuggler)
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer) 

;;
;; line spacing
;;
(setq-default line-spacing 4)

;;
;; show time in modeline
;;
(display-time-mode 1)

;; line/column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; auto fill column
(setq-default fill-column 90)

;;;==============================================================================
;;;==============================================================================
;;;
;;; backup files
;;;
;;; taken from here: http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
;;;
(setq version-control t     ;; Use version numbers for backups.
      kept-new-versions 10  ;; Number of newest versions to keep.
      kept-old-versions 0   ;; Number of oldest versions to keep.
      delete-old-versions t ;; Don't ask to delete excess backup versions.
      backup-by-copying t)  ;; Copy all files, don't rename them.

(setq vc-make-backup-files t)

;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
  ;; Make a special "per session" backup at the first save of each
  ;; emacs session.
  (when (not buffer-backed-up)
    ;; Override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
          (kept-new-versions 3))
      (backup-buffer)))
  ;; Make a "per save" backup on each save.  The first save results in
  ;; both a per-session and a per-save backup, to keep the numbering
  ;; of per-save backups consistent.
  (let ((buffer-backed-up nil))
    (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)

;;;==============================================================================
;;;==============================================================================
;;;
;;; mode/package configurations
;;;

;;
;; Helm
;;
(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "s-p") 'helm-buffers-list)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

;;
;; yasnippet
;;
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                        ;; personal snippets
        "/Users/stefan/SCM/Misc/ste-yasnippets"      ;; personal collection
        "/Users/stefan/SCM/Misc/yasnippet-snippets"  ;; the default collection
        ))
(yas-global-mode 1)

;;
;; org-mode
;;
;; shortcuts
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

;; show inline images when loading a file
(setq org-startup-with-inline-images t)

;; use auto-fill in org mode
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; agenda configuration
;; which files to take into account for the agenda (all in the top-level org dir)
(setq org-agenda-files (list "~/CloudDrive/org/"))
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-deadline-warning-days 0)
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;; todos

;; priorities
(setq org-highest-priority ?A)
(setq org-default-priority ?N)
(setq org-lowest-priority  ?Z)

; log time of todo changes
(setq org-log-done 'time)
; the following would require a note when switching to a done state
(setq org-log-done 'note)

;; clocking 
(setq org-log-into-drawer t) ; needs to be set before calling org-clock-persistence-insinuate
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-log-note-clock-out t) ; enter note when clocking out
; clocktables format is hh:mm, not dd hh:mm (i.e., report time as 32:00, not 1d 8:00)
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))

;; refile config, taken from http://doc.norang.ca/org-mode.html#Refiling
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 5)
                                 (org-agenda-files :maxlevel . 5 ))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


;; preserve (somewhat) the integrity of your archive structure while archiving lower level items
;; taken from http://orgmode.org/worg/org-hacks.html
(defadvice org-archive-subtree (around my-org-archive-subtree activate)
  (let ((org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (> (org-outline-level) 1))
             (concat (car (split-string org-archive-location "::"))
                     "::* "
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it))


;; agenda
(setq org-agenda-clockreport-parameter-plist
	  '(:fileskip0 t))

;; exporting
(require 'ox-odt)

;;
;; link abbreviation for org attachments
;;
(setq org-link-abbrev-alist '(("att" . org-attach-expand-link)))

;;
;; mac link grabber
;;
(require 'org-mac-link)
(add-hook 'org-mode-hook (lambda () 
						   (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))

;;
;; org-ical
;;
(setq org-agenda-include-diary t)

(setq org-agenda-custom-commands
      '(("I" "Import diary from iCal" agenda ""
         ((org-agenda-mode-hook
           (lambda ()
             (org-mac-iCal)))))))

(add-hook 'org-agenda-cleanup-fancy-diary-hook
          (lambda ()
            (goto-char (point-min))
            (save-excursion
              (while (re-search-forward "^[a-z]" nil t)
                (goto-char (match-beginning 0))
                (insert "0:00-24:00 ")))
            (while (re-search-forward "^ [a-z]" nil t)
              (goto-char (match-beginning 0))
              (save-excursion
                (re-search-backward "^[0-9]+:[0-9]+-[0-9]+:[0-9]+ " nil t))
              (insert (match-string 0)))))

;;
;; MobileOrg
;;
;; Set to the location of your Org files on your local system
(setq org-directory "~/CloudDrive/org")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/CloudDrive/org/inbox-mobile.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")


;;
;; git gutter
;;
(require 'git-gutter-fringe+)


;;
;; emmet
;;
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(setq emmet-move-cursor-between-quotes t) ;; default nil

;;
;; multiple cursors
;;
(require 'multiple-cursors)
(global-set-key (kbd "C-S-l") 'mc/edit-lines)
(global-set-key (kbd "s-g") 'mc/mark-next-like-this)
(global-set-key (kbd "S-s-g") 'mc/unmark-next-like-this)
(global-set-key (kbd "s-d") 'mc/mark-previous-like-this)
(global-set-key (kbd "S-s-d") 'mc/unmark-previous-like-this)
(global-set-key (kbd "C-c s-g") 'mc/mark-all-like-this)

;;
;; expand region
;;
(require 'expand-region)
(global-set-key (kbd "s-.") 'er/expand-region)

;;
;; Easy PG
;;
(require 'epa-file)
(epa-file-enable)
(setq epg-gpg-program "/usr/local/bin/gpg")

;;
;; pivotal tracker
;;
(setq pivotal-api-token "88a340d0a195c97ece1ea25be7cb3692")

;;
;; transpose frame
;;
(require 'transpose-frame)

;;
;; wolfram-mode
;;
(autoload 'wolfram-mode "wolfram-mode" nil t)
(autoload 'run-wolfram "wolfram-mode" nil t)
(setq wolfram-program "/Applications/Mathematica 10.2.app/Contents/MacOS/MathKernel")
(add-to-list 'auto-mode-alist '("\\.m$" . wolfram-mode))

;;
;; Applescript mode
;;
(require 'apples-mode)
(add-to-list 'auto-mode-alist '("\\.\\(applescri\\|sc\\)pt\\'" . apples-mode))

;;
;; icicles
;;
;;(require 'icicles)
;;(icy-mode 1)

;;
;; auto-complete
;;
(require 'auto-complete)
(global-auto-complete-mode t)

;;
;; markdown mode
;;
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode t)
            (writegood-mode t)
            (flyspell-mode t)))
(setq markdown-command "pandoc --smart -f markdown -t html")
(setq markdown-css-paths
	  '("/Users/stefan/Library/Application Support/Mou/CSS/Clearness.css"))

;;
;; SLIME
;;

;; Set your lisp system and, optionally, some contribs
(setq inferior-lisp-program "/usr/local/bin/sbcl")
(setq slime-contribs '(slime-fancy))
 (add-hook 'slime-mode-hook 'set-up-slime-ac)
 (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
 (eval-after-load "auto-complete"
   '(add-to-list 'ac-modes 'slime-repl-mode))
;;
;; LaTeX
;;
(require 'tex-site)
;; ;; (load "preview-latex.el" nil t t) ;; apparently comes with auctex
(add-hook 'LaTeX-mode-hook (lambda () (turn-on-auto-fill)))
(require 'auto-complete-auctex)

;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(server-start); start emacs in server mode so that skim can talk to it


;;
;; yaml mode
(autoload 'yaml-mode "yaml-mode" "YAML" t)
(setq auto-mode-alist
       (append '(("\\.yml$" . yaml-mode)) auto-mode-alist))

;;
;; cmake mode
;;
(require 'cmake-mode)
;;(setq auto-mode-alist
;;        (append '(("CMakeLists\\.txt\\'" . cmake-mode)
;;                  ("\\.cmake\\'" . cmake-mode))
;;auto-mode-alist))

;;
;; gnuplot mode
;;

;; load the file
(require 'gnuplot)
    
;; specify the gnuplot executable (if other than /usr/bin/gnuplot)
(setq gnuplot-program "/usr/local/bin/gnuplot")

(autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
(autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

;; automatically open files ending with .gp or .gnuplot in gnuplot mode
(setq auto-mode-alist 
	  (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))


;;
;; VBA mode. Yuck. Yes, VBA.
;;
;;(require 'visual-basic-mode)
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode." t)
(setq auto-mode-alist (append '(("\\.\\(frm\\|bas\\|cls\\)$" .
                                visual-basic-mode)) auto-mode-alist))

;; 
;; python
;;
;; (setq python-mode-hook
;;       '(lambda () (progn
;;                         (set-variable 'py-indent-offset 4)
;;                         (set-variable 'py-smart-indentation nil)
;;                         (set-variable 'indent-tabs-mode nil) 
;; 						(setq tab-width 4) )))

;;
;; outline mode for TODO files
;;
;; (setq auto-mode-alist (append '(("TODO" . outline-mode)) auto-mode-alist))

;;
;; C# = C++
;;
;; (setq auto-mode-alist (append '(("\\.cs$" . c++-mode)) auto-mode-alist))
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)

;;
;; Fortran mode
;;
;; (setq auto-mode-alist (append '(("\\.inc$" . f90-mode)) auto-mode-alist))
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)

;;
;; CSS mode
;;
;; (autoload 'css-mode "css-mode")
;; (setq auto-mode-alist
;;      (cons '("\\.css\\'" . css-mode) auto-mode-alist))

;;
;; Taskjugger files
;;
;; (autoload 'shell-script-mode "shell-script-mode")
;; (setq auto-mode-alist
;;    (cons '("\\.tjp\\'" . shell-script-mode) auto-mode-alist))
;; (require 'taskjuggler-mode)


;;;==============================================================================
;;;==============================================================================
;;;
;;; custom
;;;


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (monokai)))
 '(custom-safe-themes
   (quote
	("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "05c3bc4eb1219953a4f182e10de1f7466d28987f48d647c01f1f0037ff35ab9a" default)))
 '(doc-view-continuous t)
 '(doc-view-ghostscript-program "/usr/local/bin/gs")
 '(helm-ff-skip-boring-files t)
 '(org-modules
   (quote
	(org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail org-w3m org-mac-iCal org-mac-link)))
 '(org-src-fontify-natively t)
 '(org-src-tab-acts-natively t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#272822" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "nil" :family "Menlo")))))
