;;==============================================================================
;;==============================================================================
;;
;; global stuff
;;
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(setq transient-mark-mode t)
(show-paren-mode t) ; always highlight matching parentheses
(if window-system (tool-bar-mode -1)) ; hide toolbar
(setq default-tab-width 4) 
(setq tab-width 4)
(setq c-basic-offset 4)
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(setq-default fill-column 95)
(require 'whitespace)

;;==============================================================================
;;==============================================================================
;;
;; packages
;;
(require 'package) ;; You might already have this line
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
(package-initialize) ;; You might already have this line

(setq my-package-list
	  '(slime ac-slime yaml-mode cmake-mode python-mode gnuplot auctex
		auto-complete-auctex icicles pivotal-tracker palette transpose-frame
		helm
		yasnippet common-lisp-snippets
		emmet-mode
		multiple-cursors mc-extras
		expand-region))

(mapc #'package-install my-package-list)

;;==============================================================================
;;==============================================================================
;;
;; keybindings
;;

;; switch between windows using cmd-arrowkey
(windmove-default-keybindings)
(global-set-key (kbd "s-<left>")  'windmove-left)
(global-set-key (kbd "s-<right>") 'windmove-right)
(global-set-key (kbd "s-<up>")    'windmove-up)
(global-set-key (kbd "s-<down>")  'windmove-down)

;; cycle through windows
(global-set-key (kbd "C-.") 'other-window)
(global-set-key (kbd "C-,") 'prev-window)

(defun prev-window ()
  (interactive)
  (other-window -1))

;;==============================================================================
;;==============================================================================
;;
;; UI tweaks
;;

;;
;; uniquify buffer names by prepending elements from the path
;;
(when (require 'uniquify nil t)
  (setq uniquify-buffer-name-style 'forward))

;;
;; Recently opened files
;;
(require 'recentf nil t)
(when (fboundp 'recentf-mode) (recentf-mode 1))
(global-set-key "\C-o" 'recentf-open-files) ;displays this menu in a buffer

;;
;; "smooth" scrolling (or, at least, what emacs sees as smooth. should be called
;; "less-annoyingly-jerky-scrolling)
;;
(setq redisplay-dont-pause t
	  scroll-margin 1
	  scroll-step 1
	  scroll-conservatively 10000
	  scroll-preserve-screen-position 1
	  mouse-wheel-scroll-amount '(1 ((shift) . 1))
	  mouse-wheel-progressive-speed nil
	  mouse-wheel-follow-mouse 't)

;;
;; display ansi colors in comint mode (shell output, ...)
;; and in compilation mode (e.g.: taskjuggler)
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer) 

;;
;; line spacing
;;
(setq-default line-spacing 4)

;;
;; show time in modeline
;;
(display-time-mode 1)

;;==============================================================================
;;==============================================================================
;;
;; modes
;;

;;
;; Helm
;;
(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "s-p") 'helm-buffers-list)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

;;
;; yasnippet
;;
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                        ;; personal snippets
        "/Users/stefan/SCM/Misc/ste-yasnippets"      ;; personal collection
        "/Users/stefan/SCM/Misc/yasnippet-snippets"  ;; the default collection
        ))
(yas-global-mode 1)

;;
;; emmet
;;
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(setq emmet-move-cursor-between-quotes t) ;; default nil

;;
;; multiple cursors
;;
(require 'multiple-cursors)
(global-set-key (kbd "s-S-<down>") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;
;; expand region
;;
(require 'expand-region)
(global-set-key (kbd "s-.") 'er/expand-region)


;;
;; pivotal tracker
;;
(setq pivotal-api-token "88a340d0a195c97ece1ea25be7cb3692")

;;
;; transpose frame
;;
(require 'transpose-frame)


;;
;; icicles
;;
;;(require 'icicles)
;;(icy-mode 1)

;;
;; auto-complete
;;
(require 'auto-complete)
(global-auto-complete-mode t)

;;
;; SLIME
;;

;; Set your lisp system and, optionally, some contribs
(setq inferior-lisp-program "/usr/local/bin/sbcl")
(setq slime-contribs '(slime-fancy))
 (add-hook 'slime-mode-hook 'set-up-slime-ac)
 (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
 (eval-after-load "auto-complete"
   '(add-to-list 'ac-modes 'slime-repl-mode))
;;
;; LaTeX
;;
(require 'tex-site)
;; ;; (load "preview-latex.el" nil t t) ;; apparently comes with auctex
(add-hook 'LaTeX-mode-hook (lambda () (turn-on-auto-fill)))
(require 'auto-complete-auctex)

;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(server-start); start emacs in server mode so that skim can talk to it


;;;
;; yaml mode
(autoload 'yaml-mode "yaml-mode" "YAML" t)
(setq auto-mode-alist
       (append '(("\\.yml$" . yaml-mode)) auto-mode-alist))

;;
;; cmake mode
;;
(require 'cmake-mode)
;;(setq auto-mode-alist
;;        (append '(("CMakeLists\\.txt\\'" . cmake-mode)
;;                  ("\\.cmake\\'" . cmake-mode))
;;auto-mode-alist))

;;
;; Magit mode
;;
;; (require 'magit)

;;
;; gnuplot mode
;;
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/gnuplot-mode")
;; ;; extracted from dotemacs file distributed with the source tarball
(autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
(autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)
(setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
(global-set-key [(f9)] 'gnuplot-make-buffer)


;; 
;; python
;;
;; (setq python-mode-hook
;;       '(lambda () (progn
;;                         (set-variable 'py-indent-offset 4)
;;                         (set-variable 'py-smart-indentation nil)
;;                         (set-variable 'indent-tabs-mode nil) 
;; 						(setq tab-width 4) )))

;;
;; outline mode for TODO files
;;
;; (setq auto-mode-alist (append '(("TODO" . outline-mode)) auto-mode-alist))

;;
;; C# = C++
;;
;; (setq auto-mode-alist (append '(("\\.cs$" . c++-mode)) auto-mode-alist))
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)

;;
;; Fortran mode
;;
;; (setq auto-mode-alist (append '(("\\.inc$" . f90-mode)) auto-mode-alist))
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)

;;
;; CSS mode
;;
;; (autoload 'css-mode "css-mode")
;; (setq auto-mode-alist
;;      (cons '("\\.css\\'" . css-mode) auto-mode-alist))

;;
;; Taskjugger files
;;
;; (autoload 'shell-script-mode "shell-script-mode")
;; (setq auto-mode-alist
;;    (cons '("\\.tjp\\'" . shell-script-mode) auto-mode-alist))
;; (require 'taskjuggler-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (monokai)))
 '(custom-safe-themes
   (quote
	("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "05c3bc4eb1219953a4f182e10de1f7466d28987f48d647c01f1f0037ff35ab9a" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#272822" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "nil" :family "Menlo")))))
